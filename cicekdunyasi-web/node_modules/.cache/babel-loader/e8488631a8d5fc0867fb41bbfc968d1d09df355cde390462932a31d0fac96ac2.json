{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5140/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authAPI = {\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      console.error('Login API error:', error);\n      throw error;\n    }\n  },\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Register API error:', error);\n      throw error;\n    }\n  }\n};\nexport const flowersAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/flowers');\n      return response.data;\n    } catch (error) {\n      console.error('Get flowers API error:', error);\n      throw error;\n    }\n  },\n  getAllForAdmin: async () => {\n    try {\n      const response = await api.get('/flowers/admin');\n      return response.data;\n    } catch (error) {\n      console.error('Get flowers for admin API error:', error);\n      throw error;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/flowers/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get flower by ID API error:', error);\n      throw error;\n    }\n  },\n  create: async flowerData => {\n    try {\n      const response = await api.post('/flowers', flowerData);\n      return response.data;\n    } catch (error) {\n      console.error('Create flower API error:', error);\n      throw error;\n    }\n  },\n  update: async (id, flowerData) => {\n    try {\n      const response = await api.put(`/flowers/${id}`, flowerData);\n      return response.data;\n    } catch (error) {\n      console.error('Update flower API error:', error);\n      throw error;\n    }\n  },\n  delete: async id => {\n    try {\n      const response = await api.delete(`/flowers/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Delete flower API error:', error);\n      throw error;\n    }\n  }\n};\nexport const ordersAPI = {\n  getAll: async () => {\n    try {\n      const response = await api.get('/orders');\n      return response.data;\n    } catch (error) {\n      console.error('Get orders API error:', error);\n      throw error;\n    }\n  },\n  getMyOrders: async () => {\n    try {\n      const response = await api.get('/orders/my-orders');\n      return response.data;\n    } catch (error) {\n      console.error('Get my orders API error:', error);\n      throw error;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await api.get(`/orders/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get order by ID API error:', error);\n      throw error;\n    }\n  },\n  create: async order => {\n    try {\n      const response = await api.post('/orders', order);\n      return response.data;\n    } catch (error) {\n      console.error('Create order API error:', error);\n      throw error;\n    }\n  },\n  updateStatus: async (orderId, status) => {\n    try {\n      const response = await api.put(`/orders/${orderId}/status`, {\n        status\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Update order status API error:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","data","console","register","userData","flowersAPI","getAll","get","getAllForAdmin","getById","id","flowerData","update","put","delete","ordersAPI","getMyOrders","order","updateStatus","orderId"],"sources":["C:/Users/90545/source/vscRepos/ÇiçekDünyası/cicekdunyasi-web/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { LoginRequest, LoginResponse, Flower, Order, CreateOrderRequest } from '../types';\n\nconst API_BASE_URL = 'http://localhost:5140/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const authAPI = {\n  login: async (credentials: LoginRequest): Promise<LoginResponse> => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      console.error('Login API error:', error);\n      throw error;\n    }\n  },\n  register: async (userData: { username: string; email: string; password: string }): Promise<any> => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      console.error('Register API error:', error);\n      throw error;\n    }\n  },\n};\n\nexport const flowersAPI = {\n  getAll: async (): Promise<Flower[]> => {\n    try {\n      const response = await api.get('/flowers');\n      return response.data;\n    } catch (error) {\n      console.error('Get flowers API error:', error);\n      throw error;\n    }\n  },\n  getAllForAdmin: async (): Promise<Flower[]> => {\n    try {\n      const response = await api.get('/flowers/admin');\n      return response.data;\n    } catch (error) {\n      console.error('Get flowers for admin API error:', error);\n      throw error;\n    }\n  },\n  getById: async (id: number): Promise<Flower> => {\n    try {\n      const response = await api.get(`/flowers/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get flower by ID API error:', error);\n      throw error;\n    }\n  },\n  create: async (flowerData: { name: string; description: string; price: number; stockQuantity: number; imageUrl?: string }): Promise<Flower> => {\n    try {\n      const response = await api.post('/flowers', flowerData);\n      return response.data;\n    } catch (error) {\n      console.error('Create flower API error:', error);\n      throw error;\n    }\n  },\n  update: async (id: number, flowerData: { name: string; description: string; price: number; stockQuantity: number; imageUrl?: string }): Promise<Flower> => {\n    try {\n      const response = await api.put(`/flowers/${id}`, flowerData);\n      return response.data;\n    } catch (error) {\n      console.error('Update flower API error:', error);\n      throw error;\n    }\n  },\n  delete: async (id: number): Promise<void> => {\n    try {\n      const response = await api.delete(`/flowers/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Delete flower API error:', error);\n      throw error;\n    }\n  },\n};\n\nexport const ordersAPI = {\n  getAll: async (): Promise<Order[]> => {\n    try {\n      const response = await api.get('/orders');\n      return response.data;\n    } catch (error) {\n      console.error('Get orders API error:', error);\n      throw error;\n    }\n  },\n  getMyOrders: async (): Promise<Order[]> => {\n    try {\n      const response = await api.get('/orders/my-orders');\n      return response.data;\n    } catch (error) {\n      console.error('Get my orders API error:', error);\n      throw error;\n    }\n  },\n  getById: async (id: number): Promise<Order> => {\n    try {\n      const response = await api.get(`/orders/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get order by ID API error:', error);\n      throw error;\n    }\n  },\n  create: async (order: CreateOrderRequest): Promise<Order> => {\n    try {\n      const response = await api.post('/orders', order);\n      return response.data;\n    } catch (error) {\n      console.error('Create order API error:', error);\n      throw error;\n    }\n  },\n  updateStatus: async (orderId: number, status: string): Promise<Order> => {\n    try {\n      const response = await api.put(`/orders/${orderId}/status`, { status });\n      return response.data;\n    } catch (error) {\n      console.error('Update order status API error:', error);\n      throw error;\n    }\n  },\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMU,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAOC,WAAyB,IAA6B;IAClE,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMf,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;MAC3D,OAAOT,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxC,MAAMA,KAAK;IACb;EACF,CAAC;EACDgB,QAAQ,EAAE,MAAOC,QAA+D,IAAmB;IACjG,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMf,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAEI,QAAQ,CAAC;MAC3D,OAAOd,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,OAAO,MAAMkB,UAAU,GAAG;EACxBC,MAAM,EAAE,MAAAA,CAAA,KAA+B;IACrC,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMf,GAAG,CAACgC,GAAG,CAAC,UAAU,CAAC;MAC1C,OAAOjB,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF,CAAC;EACDqB,cAAc,EAAE,MAAAA,CAAA,KAA+B;IAC7C,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMf,GAAG,CAACgC,GAAG,CAAC,gBAAgB,CAAC;MAChD,OAAOjB,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF,CAAC;EACDsB,OAAO,EAAE,MAAOC,EAAU,IAAsB;IAC9C,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMf,GAAG,CAACgC,GAAG,CAAC,YAAYG,EAAE,EAAE,CAAC;MAChD,OAAOpB,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EACDX,MAAM,EAAE,MAAOmC,UAA0G,IAAsB;IAC7I,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAMf,GAAG,CAACyB,IAAI,CAAC,UAAU,EAAEW,UAAU,CAAC;MACvD,OAAOrB,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EACDyB,MAAM,EAAE,MAAAA,CAAOF,EAAU,EAAEC,UAA0G,KAAsB;IACzJ,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAMf,GAAG,CAACsC,GAAG,CAAC,YAAYH,EAAE,EAAE,EAAEC,UAAU,CAAC;MAC5D,OAAOrB,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EACD2B,MAAM,EAAE,MAAOJ,EAAU,IAAoB;IAC3C,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMf,GAAG,CAACuC,MAAM,CAAC,YAAYJ,EAAE,EAAE,CAAC;MACnD,OAAOpB,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,OAAO,MAAM4B,SAAS,GAAG;EACvBT,MAAM,EAAE,MAAAA,CAAA,KAA8B;IACpC,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMf,GAAG,CAACgC,GAAG,CAAC,SAAS,CAAC;MACzC,OAAOjB,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EACD6B,WAAW,EAAE,MAAAA,CAAA,KAA8B;IACzC,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMf,GAAG,CAACgC,GAAG,CAAC,mBAAmB,CAAC;MACnD,OAAOjB,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EACDsB,OAAO,EAAE,MAAOC,EAAU,IAAqB;IAC7C,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMf,GAAG,CAACgC,GAAG,CAAC,WAAWG,EAAE,EAAE,CAAC;MAC/C,OAAOpB,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF,CAAC;EACDX,MAAM,EAAE,MAAOyC,KAAyB,IAAqB;IAC3D,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMf,GAAG,CAACyB,IAAI,CAAC,SAAS,EAAEiB,KAAK,CAAC;MACjD,OAAO3B,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EACD+B,YAAY,EAAE,MAAAA,CAAOC,OAAe,EAAE3B,MAAc,KAAqB;IACvE,IAAI;MACF,MAAMF,QAAQ,GAAG,MAAMf,GAAG,CAACsC,GAAG,CAAC,WAAWM,OAAO,SAAS,EAAE;QAAE3B;MAAO,CAAC,CAAC;MACvE,OAAOF,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOd,KAAK,EAAE;MACde,OAAO,CAACf,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}